# -*- coding: utf-8 -*-
"""Weather_api.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ESHAlwK4RpzUVk1nZNNfJ_Cn8OpxHR7_
"""

# Usually not needed in Colab, but just in case
!pip install seaborn
import requests
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from datetime import datetime
import requests
import matplotlib.pyplot as plt
import pandas as pd
from datetime import datetime

API_KEY = "5775a720bb587ba0034e26d58f4b5a06"
UNITS = "metric"

def get_weather_emoji(description: str) -> str:
    desc = description.lower()
    if "rain" in desc: return "🌧️"
    if "cloud" in desc: return "☁️"
    if "clear" in desc: return "☀️"
    if "snow" in desc: return "❄️"
    if "storm" in desc: return "⛈️"
    if "mist" in desc or "fog" in desc: return "🌫️"
    return "🌈"

def display_current_weather(city):
    CURRENT_URL = "http://api.openweathermap.org/data/2.5/weather"
    try:
        response = requests.get(CURRENT_URL, params={
            "q": city,
            "appid": API_KEY,
            "units": UNITS
        })
        response.raise_for_status()
        data = response.json()

        if "main" in data and "weather" in data:
            main = data["main"]
            weather = data["weather"][0]
            desc = weather["description"]
            emoji = get_weather_emoji(desc)

            print("\n=========== Current Weather ===========")
            print(f"📍 City        : {city.title()}")
            print(f"🌡️ Temperature : {main['temp']}°C")
            print(f"💧 Humidity    : {main['humidity']}%")
            print(f"{emoji} Weather     : {desc.capitalize()}")
            print("=======================================\n")
        else:
            print("⚠️ Could not retrieve valid current weather data.")
    except requests.exceptions.RequestException as e:
        print("❌ Error fetching current weather:", e)

def plot_forecast(city):
    FORECAST_URL = f"https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={API_KEY}&units=metric"
    response = requests.get(FORECAST_URL)

    if response.status_code != 200:
        print(f"❌ Failed to retrieve forecast: {response.status_code} - {response.text}")
        return

    data = response.json()
    dates, temperatures, humidities = [], [], []

    for entry in data['list']:
        dt_txt = entry['dt_txt']
        temp = entry['main']['temp']
        humidity = entry['main']['humidity']
        dates.append(datetime.strptime(dt_txt, "%Y-%m-%d %H:%M:%S"))
        temperatures.append(temp)
        humidities.append(humidity)

    df = pd.DataFrame({
        'DateTime': dates,
        'Temperature (°C)': temperatures,
        'Humidity (%)': humidities
    })

    # 🌡️ Temperature Plot
    plt.figure(figsize=(14, 5))
    plt.plot(df['DateTime'], df['Temperature (°C)'], color='crimson', marker='o', linestyle='--')
    plt.title(f"🌡️ Temperature Forecast for {city.title()}", fontsize=14)
    plt.xlabel("Date & Time")
    plt.ylabel("Temperature (°C)")
    plt.xticks(rotation=45)
    plt.grid(True)

    max_temp = max(temperatures)
    min_temp = min(temperatures)
    max_time = dates[temperatures.index(max_temp)]
    min_time = dates[temperatures.index(min_temp)]

    plt.annotate(f'Max: {max_temp}°C', xy=(max_time, max_temp), xytext=(max_time, max_temp + 1),
                 arrowprops=dict(arrowstyle="->", color='red'), color='red')
    plt.annotate(f'Min: {min_temp}°C', xy=(min_time, min_temp), xytext=(min_time, min_temp - 2),
                 arrowprops=dict(arrowstyle="->", color='blue'), color='blue')

    plt.tight_layout()
    plt.show()

    # 💧 Humidity Plot
    plt.figure(figsize=(14, 5))
    plt.plot(df['DateTime'], df['Humidity (%)'], color='royalblue', marker='x', linestyle='-')
    plt.title(f"💧 Humidity Forecast for {city.title()}", fontsize=14)
    plt.xlabel("Date & Time")
    plt.ylabel("Humidity (%)")
    plt.xticks(rotation=45)
    plt.grid(True)
    plt.tight_layout()
    plt.show()

    df.to_csv(f"{city}_5_day_forecast.csv", index=False)
    print(f"📁 Forecast data saved to '{city}_5_day_forecast.csv'.")

def main():
    print("🌐 Welcome to Isha's Weather & Forecast App!\n")
    city = input("Enter city name: ").strip()
    display_current_weather(city)
    plot_forecast(city)

if __name__ == "__main__":
    main()